generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

/////////////

model Profile {
  id  String  @id @default(uuid())
  bio String?

  user   User?  @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("profile")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  username String  @unique
  image    String?
  password String

  authType AuthType @default(ADMIN)

  Profile  Profile?
  Reviews  Review[]
  Products Product[]
  Blogs    Blog[]

  @@map("user")
}

model Blog {
  id      String  @id @default(uuid())
  image   String?
  title   String  @unique
  content String

  User   User?  @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("blog")
}

model Product {
  id            String @id @default(uuid())
  name          String @unique
  description   String
  price         Float  @default(0.0)
  discountPrice Float? @default(0.0)

  Reviews Review[]
  User    User?    @relation(fields: [userId], references: [id])
  userId  String   @map("user_id")

  @@map("product")
}

model Review {
  id      String  @id @default(uuid())
  title   String?
  content String?
  rating  Int     @default(0) // 0.0 to 5 // 0.5 - 1.0 - 1.5

  User      User?    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  Product   Product? @relation(fields: [productId], references: [id])
  productId String   @map("product_id")

  @@map("review")
}

enum AuthType {
  ADMIN
  USER
}

model EmailSubscriber {
  id       String  @id @default(uuid())
  email    String  @unique
  isActive Boolean @default(true) @map("is_active")

  @@map("email_subscriber")
}

model DumpData {
  id       String  @id @default(uuid())
  isDelete Boolean @map("is_delete")
  userId   String  @map("user_id")

  @@map("dump_data")
}
